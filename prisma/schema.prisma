generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Role {
  WOLF
  USER
}

enum Type {
  tshirt
  sweater
  hoodie
  accessory
  print
}

// product model
model Product {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl1   String
  imageUrl2   String?
  imageUrl3   String?
  imageUrl4   String?
  price       Int
  type        Type
  sizes       productSize[]
  CartItems   CartItems[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("products")
}

// Size model
model productSize {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  size      Size
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("productSizes")
}

// cart model
model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItems[]
  User      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?     @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("carts")
}

// cart items model
model CartItems {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartItems")
}

// google account model
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// session model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// user model
model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String             @unique
  verificationToken   VerificationToken? @relation(fields: [verificationTokenId], references: [id])
  emailVerified       Boolean            @default(false)
  password            String?
  image               String?
  role                Role               @default(USER)
  accounts            Account[]
  sessions            Session[]
  Cart                Cart[]
  Address             Address[]
  createdAt           DateTime?          @default(now())
  updatedAt           DateTime?          @updatedAt
  verificationTokenId String?            @db.ObjectId

  @@map("users")
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  state     String
  zip       String
  country   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

// verification token model
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  User       User[]

  @@unique([identifier, token])
  @@map("verificationtokens")
}
